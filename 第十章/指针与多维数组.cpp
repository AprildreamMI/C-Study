/*
  指针与多维数组
*/
#include <stdio.h>
int main (void) {
  int zippo[4][2] = { {2, 4}, {6, 8}, {1, 3}, {5, 7} };

  printf("二维数组：int zippo[4][2] = { {2, 4}, {6, 8}, {1, 3}, {5, 7} };\n");

  printf("*******************************************************\n");
  // 第一行第一列的地址
  // +1 后, 就是第二行第一列的地址
  printf("// zippo 的地址为  zippo + 1 的地址为\n");
  printf("// +1 后, 因为一行有两个int(4字节)的变量, 所以加上8字节 就是第二行第一列的地址\n");
  printf("   zippo = %p,    zippo + 1 = %p\n", zippo, zippo + 1);

  printf("// zippo 的int为  zippo + 1 的int为\n");
  printf("// 输出的只不过是地址值得十进制表示\n");
  printf("   zippo = %d,    zippo + 1 = %d\n", zippo, zippo + 1);
  printf("*******************************************************\n");

  printf("*******************************************************\n");
  // 第一行第一列的地址
  // +1 后, 就是第一行第一列的地址加上后移一位变成第一行第二列
  printf("// 第一行的地址, +1第一行的地址向右偏一列\n");
  printf("zippo[0] = %p, zippo[0] + 1 = %p\n", zippo[0], zippo[0] + 1);
  printf("*******************************************************\n");


  printf("*******************************************************\n");
  //  第一行的地址
  printf("   zippo = %p,    zippo + 1 = %p\n", zippo, zippo + 1);

  //  第一行第一列的地址, +1第一行第一列的地址向右偏一列的地址
  printf("  *zippo = %p,   *zippo + 1 = %p\n", *zippo, *zippo + 1);

  //  第一行第一列的值
  printf(" **zippo = %d\n", **zippo);
  printf("*******************************************************\n");



  //  第一行第一列的值
  printf("   zippo[0][0] = %d\n", zippo[0][0]);

  // 第一行第一列的值
  printf("     *zippo[0] = %d\n", *zippo[0]);

  //  第一行第一列的值
  printf("       **zippo = %d\n", **zippo);


  /*
    zippo + 2 是第二行的地址
    *(zippo + 2) 是第二行第一列的地址
    *(zippo + 2) + 1 是第二行第一列向右偏移一列的地址
    *(*(zippo + 2) + 1) = zippo[2][1] 是第二行第一列向右偏移一列的值
   */
  printf("*(*(zippo + 2) + 1) = %d\n", *(*(zippo + 2) +1));


  return 0;
}
